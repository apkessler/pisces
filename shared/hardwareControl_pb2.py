# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: hardwareControl.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='hardwareControl.proto',
  package='hardwarecontrol',
  syntax='proto3',
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n\x15hardwareControl.proto\x12\x0fhardwarecontrol\x1a\x1fgoogle/protobuf/timestamp.proto\"\x07\n\x05\x45mpty\"\x1e\n\x0b\x45\x63hoRequest\x12\x0f\n\x07payload\x18\x01 \x01(\t\"\x1f\n\x0c\x45\x63hoResponse\x12\x0f\n\x07payback\x18\x01 \x01(\t\"0\n\nRelayState\x12\x0f\n\x07\x63hannel\x18\x01 \x01(\r\x12\x11\n\tisEngaged\x18\x02 \x01(\x08\":\n\x0bRelayStates\x12+\n\x06states\x18\x01 \x03(\x0b\x32\x1b.hardwarecontrol.RelayState\"\'\n\x0bTemperature\x12\x18\n\x10temperature_degC\x18\x01 \x01(\x02\"a\n\nLightColor\x12\x0f\n\x07lightId\x18\x01 \x01(\r\x12\x33\n\ncolor_enum\x18\x02 \x01(\x0e\x32\x1f.hardwarecontrol.LightColorEnum\x12\r\n\x05scope\x18\x03 \x01(\t\":\n\x0bLightColors\x12+\n\x06\x63olors\x18\x01 \x03(\x0b\x32\x1b.hardwarecontrol.LightColor\"\x10\n\x02pH\x12\n\n\x02pH\x18\x01 \x01(\x02\"5\n\x0eStepperCommand\x12\x10\n\x08numSteps\x18\x01 \x01(\r\x12\x11\n\tisReverse\x18\x02 \x01(\x08\" \n\x0cStepperState\x12\x10\n\x08isActive\x18\x01 \x01(\x08\"\x16\n\x05Scope\x12\r\n\x05scope\x18\x01 \x01(\t\"&\n\nSampleTime\x12\x18\n\x10sample_time_msec\x18\x01 \x01(\r\"\x18\n\tPHCommand\x12\x0b\n\x03\x63md\x18\x01 \x01(\t\"\x1e\n\nPHResponse\x12\x10\n\x08response\x18\x01 \x01(\t*O\n\x0eLightColorEnum\x12\x12\n\x0eLightColor_Off\x10\x00\x12\x14\n\x10LightColor_White\x10\x01\x12\x13\n\x0fLightColor_Blue\x10\x02\x32\x99\t\n\x0fHardwareControl\x12\x45\n\x04\x45\x63ho\x12\x1c.hardwarecontrol.EchoRequest\x1a\x1d.hardwarecontrol.EchoResponse\"\x00\x12\x46\n\rSetRelayState\x12\x1b.hardwarecontrol.RelayState\x1a\x16.hardwarecontrol.Empty\"\x00\x12H\n\x0eGetRelayStates\x12\x16.hardwarecontrol.Empty\x1a\x1c.hardwarecontrol.RelayStates\"\x00\x12H\n\x0eGetTemperature\x12\x16.hardwarecontrol.Empty\x1a\x1c.hardwarecontrol.Temperature\"\x00\x12\x46\n\rSetLightColor\x12\x1b.hardwarecontrol.LightColor\x1a\x16.hardwarecontrol.Empty\"\x00\x12H\n\x0eGetLightColors\x12\x16.hardwarecontrol.Empty\x1a\x1c.hardwarecontrol.LightColors\"\x00\x12\x36\n\x05GetPH\x12\x16.hardwarecontrol.Empty\x1a\x13.hardwarecontrol.pH\"\x00\x12H\n\x0bMoveStepper\x12\x1f.hardwarecontrol.StepperCommand\x1a\x16.hardwarecontrol.Empty\"\x00\x12?\n\x0bStopStepper\x12\x16.hardwarecontrol.Empty\x1a\x16.hardwarecontrol.Empty\"\x00\x12J\n\x0fIsStepperActive\x12\x16.hardwarecontrol.Empty\x1a\x1d.hardwarecontrol.StepperState\"\x00\x12<\n\x08SetScope\x12\x16.hardwarecontrol.Scope\x1a\x16.hardwarecontrol.Empty\"\x00\x12H\n\x0fSetPHSampleTime\x12\x1b.hardwarecontrol.SampleTime\x1a\x16.hardwarecontrol.Empty\"\x00\x12H\n\x0fGetPHSampleTime\x12\x16.hardwarecontrol.Empty\x1a\x1b.hardwarecontrol.SampleTime\"\x00\x12Q\n\x18SetTemperatureSampleTime\x12\x1b.hardwarecontrol.SampleTime\x1a\x16.hardwarecontrol.Empty\"\x00\x12Q\n\x18GetTemperatureSampleTime\x12\x16.hardwarecontrol.Empty\x1a\x1b.hardwarecontrol.SampleTime\"\x00\x12J\n\rSendPHCommand\x12\x1a.hardwarecontrol.PHCommand\x1a\x1b.hardwarecontrol.PHResponse\"\x00\x62\x06proto3'
  ,
  dependencies=[google_dot_protobuf_dot_timestamp__pb2.DESCRIPTOR,])

_LIGHTCOLORENUM = _descriptor.EnumDescriptor(
  name='LightColorEnum',
  full_name='hardwarecontrol.LightColorEnum',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LightColor_Off', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LightColor_White', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LightColor_Blue', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=688,
  serialized_end=767,
)
_sym_db.RegisterEnumDescriptor(_LIGHTCOLORENUM)

LightColorEnum = enum_type_wrapper.EnumTypeWrapper(_LIGHTCOLORENUM)
LightColor_Off = 0
LightColor_White = 1
LightColor_Blue = 2



_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='hardwarecontrol.Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=75,
  serialized_end=82,
)


_ECHOREQUEST = _descriptor.Descriptor(
  name='EchoRequest',
  full_name='hardwarecontrol.EchoRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='payload', full_name='hardwarecontrol.EchoRequest.payload', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=84,
  serialized_end=114,
)


_ECHORESPONSE = _descriptor.Descriptor(
  name='EchoResponse',
  full_name='hardwarecontrol.EchoResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='payback', full_name='hardwarecontrol.EchoResponse.payback', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=116,
  serialized_end=147,
)


_RELAYSTATE = _descriptor.Descriptor(
  name='RelayState',
  full_name='hardwarecontrol.RelayState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='channel', full_name='hardwarecontrol.RelayState.channel', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='isEngaged', full_name='hardwarecontrol.RelayState.isEngaged', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=149,
  serialized_end=197,
)


_RELAYSTATES = _descriptor.Descriptor(
  name='RelayStates',
  full_name='hardwarecontrol.RelayStates',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='states', full_name='hardwarecontrol.RelayStates.states', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=199,
  serialized_end=257,
)


_TEMPERATURE = _descriptor.Descriptor(
  name='Temperature',
  full_name='hardwarecontrol.Temperature',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='temperature_degC', full_name='hardwarecontrol.Temperature.temperature_degC', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=259,
  serialized_end=298,
)


_LIGHTCOLOR = _descriptor.Descriptor(
  name='LightColor',
  full_name='hardwarecontrol.LightColor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='lightId', full_name='hardwarecontrol.LightColor.lightId', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='color_enum', full_name='hardwarecontrol.LightColor.color_enum', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='scope', full_name='hardwarecontrol.LightColor.scope', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=300,
  serialized_end=397,
)


_LIGHTCOLORS = _descriptor.Descriptor(
  name='LightColors',
  full_name='hardwarecontrol.LightColors',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='colors', full_name='hardwarecontrol.LightColors.colors', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=399,
  serialized_end=457,
)


_PH = _descriptor.Descriptor(
  name='pH',
  full_name='hardwarecontrol.pH',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='pH', full_name='hardwarecontrol.pH.pH', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=459,
  serialized_end=475,
)


_STEPPERCOMMAND = _descriptor.Descriptor(
  name='StepperCommand',
  full_name='hardwarecontrol.StepperCommand',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='numSteps', full_name='hardwarecontrol.StepperCommand.numSteps', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='isReverse', full_name='hardwarecontrol.StepperCommand.isReverse', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=477,
  serialized_end=530,
)


_STEPPERSTATE = _descriptor.Descriptor(
  name='StepperState',
  full_name='hardwarecontrol.StepperState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='isActive', full_name='hardwarecontrol.StepperState.isActive', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=532,
  serialized_end=564,
)


_SCOPE = _descriptor.Descriptor(
  name='Scope',
  full_name='hardwarecontrol.Scope',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='scope', full_name='hardwarecontrol.Scope.scope', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=566,
  serialized_end=588,
)


_SAMPLETIME = _descriptor.Descriptor(
  name='SampleTime',
  full_name='hardwarecontrol.SampleTime',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='sample_time_msec', full_name='hardwarecontrol.SampleTime.sample_time_msec', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=590,
  serialized_end=628,
)


_PHCOMMAND = _descriptor.Descriptor(
  name='PHCommand',
  full_name='hardwarecontrol.PHCommand',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='cmd', full_name='hardwarecontrol.PHCommand.cmd', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=630,
  serialized_end=654,
)


_PHRESPONSE = _descriptor.Descriptor(
  name='PHResponse',
  full_name='hardwarecontrol.PHResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='response', full_name='hardwarecontrol.PHResponse.response', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=656,
  serialized_end=686,
)

_RELAYSTATES.fields_by_name['states'].message_type = _RELAYSTATE
_LIGHTCOLOR.fields_by_name['color_enum'].enum_type = _LIGHTCOLORENUM
_LIGHTCOLORS.fields_by_name['colors'].message_type = _LIGHTCOLOR
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY
DESCRIPTOR.message_types_by_name['EchoRequest'] = _ECHOREQUEST
DESCRIPTOR.message_types_by_name['EchoResponse'] = _ECHORESPONSE
DESCRIPTOR.message_types_by_name['RelayState'] = _RELAYSTATE
DESCRIPTOR.message_types_by_name['RelayStates'] = _RELAYSTATES
DESCRIPTOR.message_types_by_name['Temperature'] = _TEMPERATURE
DESCRIPTOR.message_types_by_name['LightColor'] = _LIGHTCOLOR
DESCRIPTOR.message_types_by_name['LightColors'] = _LIGHTCOLORS
DESCRIPTOR.message_types_by_name['pH'] = _PH
DESCRIPTOR.message_types_by_name['StepperCommand'] = _STEPPERCOMMAND
DESCRIPTOR.message_types_by_name['StepperState'] = _STEPPERSTATE
DESCRIPTOR.message_types_by_name['Scope'] = _SCOPE
DESCRIPTOR.message_types_by_name['SampleTime'] = _SAMPLETIME
DESCRIPTOR.message_types_by_name['PHCommand'] = _PHCOMMAND
DESCRIPTOR.message_types_by_name['PHResponse'] = _PHRESPONSE
DESCRIPTOR.enum_types_by_name['LightColorEnum'] = _LIGHTCOLORENUM
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), {
  'DESCRIPTOR' : _EMPTY,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.Empty)
  })
_sym_db.RegisterMessage(Empty)

EchoRequest = _reflection.GeneratedProtocolMessageType('EchoRequest', (_message.Message,), {
  'DESCRIPTOR' : _ECHOREQUEST,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.EchoRequest)
  })
_sym_db.RegisterMessage(EchoRequest)

EchoResponse = _reflection.GeneratedProtocolMessageType('EchoResponse', (_message.Message,), {
  'DESCRIPTOR' : _ECHORESPONSE,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.EchoResponse)
  })
_sym_db.RegisterMessage(EchoResponse)

RelayState = _reflection.GeneratedProtocolMessageType('RelayState', (_message.Message,), {
  'DESCRIPTOR' : _RELAYSTATE,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.RelayState)
  })
_sym_db.RegisterMessage(RelayState)

RelayStates = _reflection.GeneratedProtocolMessageType('RelayStates', (_message.Message,), {
  'DESCRIPTOR' : _RELAYSTATES,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.RelayStates)
  })
_sym_db.RegisterMessage(RelayStates)

Temperature = _reflection.GeneratedProtocolMessageType('Temperature', (_message.Message,), {
  'DESCRIPTOR' : _TEMPERATURE,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.Temperature)
  })
_sym_db.RegisterMessage(Temperature)

LightColor = _reflection.GeneratedProtocolMessageType('LightColor', (_message.Message,), {
  'DESCRIPTOR' : _LIGHTCOLOR,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.LightColor)
  })
_sym_db.RegisterMessage(LightColor)

LightColors = _reflection.GeneratedProtocolMessageType('LightColors', (_message.Message,), {
  'DESCRIPTOR' : _LIGHTCOLORS,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.LightColors)
  })
_sym_db.RegisterMessage(LightColors)

pH = _reflection.GeneratedProtocolMessageType('pH', (_message.Message,), {
  'DESCRIPTOR' : _PH,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.pH)
  })
_sym_db.RegisterMessage(pH)

StepperCommand = _reflection.GeneratedProtocolMessageType('StepperCommand', (_message.Message,), {
  'DESCRIPTOR' : _STEPPERCOMMAND,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.StepperCommand)
  })
_sym_db.RegisterMessage(StepperCommand)

StepperState = _reflection.GeneratedProtocolMessageType('StepperState', (_message.Message,), {
  'DESCRIPTOR' : _STEPPERSTATE,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.StepperState)
  })
_sym_db.RegisterMessage(StepperState)

Scope = _reflection.GeneratedProtocolMessageType('Scope', (_message.Message,), {
  'DESCRIPTOR' : _SCOPE,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.Scope)
  })
_sym_db.RegisterMessage(Scope)

SampleTime = _reflection.GeneratedProtocolMessageType('SampleTime', (_message.Message,), {
  'DESCRIPTOR' : _SAMPLETIME,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.SampleTime)
  })
_sym_db.RegisterMessage(SampleTime)

PHCommand = _reflection.GeneratedProtocolMessageType('PHCommand', (_message.Message,), {
  'DESCRIPTOR' : _PHCOMMAND,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.PHCommand)
  })
_sym_db.RegisterMessage(PHCommand)

PHResponse = _reflection.GeneratedProtocolMessageType('PHResponse', (_message.Message,), {
  'DESCRIPTOR' : _PHRESPONSE,
  '__module__' : 'hardwareControl_pb2'
  # @@protoc_insertion_point(class_scope:hardwarecontrol.PHResponse)
  })
_sym_db.RegisterMessage(PHResponse)



_HARDWARECONTROL = _descriptor.ServiceDescriptor(
  name='HardwareControl',
  full_name='hardwarecontrol.HardwareControl',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=770,
  serialized_end=1947,
  methods=[
  _descriptor.MethodDescriptor(
    name='Echo',
    full_name='hardwarecontrol.HardwareControl.Echo',
    index=0,
    containing_service=None,
    input_type=_ECHOREQUEST,
    output_type=_ECHORESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='SetRelayState',
    full_name='hardwarecontrol.HardwareControl.SetRelayState',
    index=1,
    containing_service=None,
    input_type=_RELAYSTATE,
    output_type=_EMPTY,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetRelayStates',
    full_name='hardwarecontrol.HardwareControl.GetRelayStates',
    index=2,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_RELAYSTATES,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetTemperature',
    full_name='hardwarecontrol.HardwareControl.GetTemperature',
    index=3,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_TEMPERATURE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='SetLightColor',
    full_name='hardwarecontrol.HardwareControl.SetLightColor',
    index=4,
    containing_service=None,
    input_type=_LIGHTCOLOR,
    output_type=_EMPTY,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetLightColors',
    full_name='hardwarecontrol.HardwareControl.GetLightColors',
    index=5,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_LIGHTCOLORS,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetPH',
    full_name='hardwarecontrol.HardwareControl.GetPH',
    index=6,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_PH,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='MoveStepper',
    full_name='hardwarecontrol.HardwareControl.MoveStepper',
    index=7,
    containing_service=None,
    input_type=_STEPPERCOMMAND,
    output_type=_EMPTY,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='StopStepper',
    full_name='hardwarecontrol.HardwareControl.StopStepper',
    index=8,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_EMPTY,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='IsStepperActive',
    full_name='hardwarecontrol.HardwareControl.IsStepperActive',
    index=9,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_STEPPERSTATE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='SetScope',
    full_name='hardwarecontrol.HardwareControl.SetScope',
    index=10,
    containing_service=None,
    input_type=_SCOPE,
    output_type=_EMPTY,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='SetPHSampleTime',
    full_name='hardwarecontrol.HardwareControl.SetPHSampleTime',
    index=11,
    containing_service=None,
    input_type=_SAMPLETIME,
    output_type=_EMPTY,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetPHSampleTime',
    full_name='hardwarecontrol.HardwareControl.GetPHSampleTime',
    index=12,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_SAMPLETIME,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='SetTemperatureSampleTime',
    full_name='hardwarecontrol.HardwareControl.SetTemperatureSampleTime',
    index=13,
    containing_service=None,
    input_type=_SAMPLETIME,
    output_type=_EMPTY,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetTemperatureSampleTime',
    full_name='hardwarecontrol.HardwareControl.GetTemperatureSampleTime',
    index=14,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_SAMPLETIME,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='SendPHCommand',
    full_name='hardwarecontrol.HardwareControl.SendPHCommand',
    index=15,
    containing_service=None,
    input_type=_PHCOMMAND,
    output_type=_PHRESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_HARDWARECONTROL)

DESCRIPTOR.services_by_name['HardwareControl'] = _HARDWARECONTROL

# @@protoc_insertion_point(module_scope)
